#deploy url shortener to EC2 instance
name: Deploy url shortener

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push url shortener
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/shortener:latest
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create docker-compose.yml if not exists
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          services:
            web:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/shortener:latest
              ports:
                - "8000:8000"
              environment:
                - REDIS_HOST=redis
                - REDIS_PORT=6379
                - PYTHONPATH=/app
              depends_on:
                - redis
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
            
            redis:
              image: redis:7-alpine
              ports:
                - "6380:6379"
              volumes:
                - redis-data:/data
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s

          networks:
            app-network:
              driver: bridge

          volumes:
            redis-data:
          EOL
          
          # Pull the latest images
          sudo docker-compose pull
          
          # Stop and remove existing containers
          sudo docker-compose down
          
          # Start new containers
          sudo docker-compose up
          
          # Check containers status
          sudo docker-compose ps
    # - name: Build and test Docker image
    #   run: |
    #     sudo docker build --target builder -t test-image .
    #     sudo docker run --rm test-image poetry check

